#Load required library
library(MASS)


# Import data and filter out days with zero rainfall
rainfall <- read.csv("rainfalldata.csv", header=T)
rainfall_ref <- subset(rainfall, Period.over.which.rainfall.was.measured..days. != 0)


breaks <- 40 # Define the number of histogram breaks, Define month names
month <- c("Janurary", "Febuary", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
gammalist <- vector(mode = "list",length = 12) # Create a list to store gamma distribution
#Q1
# Creating Gamma Dist For each month
for (i in 1:12) {
  temporary <- subset(rainfall_ref, Month == i)
  hist(temporary$Rainfall.amount..millimetres., prob = T, breaks = breaks, main = "", xlab = "", ylab = "") 
  #creating underling histograms
  title(main = paste("Probability Distribution of Rain in", month[i]), ylab = "Probability", xlab = "Rainfall (mm)")
  
  # Gamma PDFs per month
  gammalist[i] <- fitdistr(temp$Rainfall.amount..millimetres. + 0.0001, "gamma")
  #fitdistr function requires values >0, therefore have to add an arbitrary small amount
  curve(dgamma(x, shape = gammalist[[i]][[1]], rate = gammalist[[i]][[2]]), add = T, col = "blue", lwd = 3)
  
  # Mean and variance
  mean_value <- mean(temp$Rainfall.amount..millimetres.)
  variance_value <- var(temp$Rainfall.amount..millimetres.)
  
  # Print gamma distribution parameters
  cat("--", month[i], " Gamma Dist Parameters--\n")
  cat("Shape: ", gamma_fit$estimate["shape"], "\n")
  cat("Rate: ", gamma_fit$estimate["rate"], "\n")
  
  # Print distribution parameters
  cat("--", month[i], " Distribution Information--\n")
  cat("Mean: ", mean_value, "\n")
  cat("Variance: ", variance_value, "\n\n")
}

# Define the number of bins for the histogram
num_bins <- 20

# Subset data for January and July
january_data <- subset(filtered_rainfall, Month == 1)
july_data <- subset(filtered_rainfall, Month == 7)

# Create histograms for January and July
january_histogram <- hist(january_data$Rainfall.amount..millimetres., breaks = num_bins, plot = FALSE)
july_histogram <- hist(july_data$Rainfall.amount..millimetres., breaks = num_bins, plot = FALSE)

# Calculate expected frequencies using gamma distribution parameters
expected_frequencies_january <- dgamma(january_histogram$mids, 
                                       shape = gamma_month[[1]][[1]], 
                                       rate = gamma_month[[1]][[2]]) * length(january_data$Rainfall.amount..millimetres)

expected_frequencies_july <- dgamma(july_histogram$mids, 
                                    shape = gamma_month[[7]][[1]], 
                                    rate = gamma_month[[7]][[2]]) * length(july_data$Rainfall.amount..millimetres)

# Calculate chi-squared statistics for January and July
chi_squared_january <- sum(((january_histogram$counts - expected_frequencies_january)^2) / expected_frequencies_january)
chi_squared_july <- sum(((july_histogram$counts - expected_frequencies_july)^2) / expected_frequencies_july)

# Print the results of the chi-squared tests
cat("Chi-squared tests for January and July:\n")
cat(paste("January:", chi_squared_january, "\n"))
cat(paste("July:", chi_squared_july, "\n"))



#Q3
# Create the initial plot and set up variables
plot(-100, xlim = c(1, 12), ylim = c(0, 400), main = "Simulated Monthly Rainfall", xlab = "Month", ylab = "Rainfall (mm)")
simulated_data_list <- vector("list", length = 10)
monthly_totals <- numeric(12)

# Perform simulations for 10 runs
for (run in 1:10) {
  # Create a list to store daily values in each month (index 1-12), index 13 will store the monthly total rainfall
  simulated_data <- vector("list", length = 13)
  
  # Simulate rainfall distribution for each month
  for (month_idx in 1:12) {
    shape <- gammalist[[month_idx]][[1]]
    rate <- gammalist[[month_idx]][[2]]
    
    # Generate daily rainfall data using gamma distribution
    simulated_data[[month_idx]] <- rgamma(30, shape = shape, rate = rate)
    
    # Calculate and store the monthly total
    monthly_totals[month_idx] <- sum(simulated_data[[month_idx]])
  }
  
  # Plot the lines for monthly total rainfall over 12 months
  lines(monthly_totals, col = run)
  
  # Store the simulated data for this run
  simulated_data_list[[run]] <- simulated_data
}

# Create a legend for the simulated years
legend("bottom", legend = paste("Year", 1:10), col = 1:10, lty = 1, title = "Simulated Years", horiz = TRUE, cex = 0.7, xpd = TRUE)


#Q4

# Constants
daily_power <- 240  # MWh
dam_v <- 67.5
monthly_energy <- 0
days_off <- 0
overflows <- 0

# Function to calculate height given volume
get_height <- function(volume) ((3 * volume) / (25 * pi))^(1/3)

# Initialize monthly power generation for each run and month
monthly_power <- matrix(0, nrow = 10, ncol = 12)

# Constants
daily_power <- 240  #setting MWh rate
dam_level <- 67.5  # Assume dam is at the median height for turbines
monthly_energy <- 0
days_off <- 0
overflows <- 0
damn_volume <- (25/3) * pi * dam_level^3  # Initialize dam volume

# Function to calculate height given volume
get_height <- function(volume) ((3 * volume) / (25 * pi))^(1/3)

# Initialize monthly power generation for each run and month
monthly_power <- matrix(0, nrow = 10, ncol = 12)

# Loop through runs
for (i in 1:10) {
  # Loop through months
  for (month_idx in 1:12) {
    # Calculate monthly energy generation
    for (day_rainfall in collated_data[[i]][[month_idx]]) {
      damn_volume <- damn_volume + (day_rainfall * 140 * 10^3 * 0.7)
      
      if (get_height(damn_volume) > 80) {
        damn_volume <- damn_volume - (100 * 86400)
        overflows <- overflows + 1
      } else if (get_height(damn_volume - (20 * 86400)) > 55) {
        damn_volume <- damn_volume - (20 * 86400)
        monthly_energy <- monthly_energy + daily_power
      } else {
        days_off <- days_off + 1
      }
    }
    # Store the monthly energy generation for this run and month
    monthly_power[i, month_idx] <- monthly_energy
    monthly_energy <- 0
  }
  cat(paste("Run ", i, " Energy output for each month: ", monthly_power[i, ], " MWh\n", sep = ""))
}

# Print total energy generation per run
total_energy_per_run <- rowSums(monthly_power)
cat(paste("Total energy generation per run: ", total_energy_per_run, " MWh\n", sep = ""))
